{"ast":null,"code":"import _regeneratorRuntime from \"E:\\\\Github\\\\ethSwap\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\";\nimport _asyncToGenerator from \"E:\\\\Github\\\\ethSwap\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"E:\\\\Github\\\\ethSwap\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _possibleConstructorReturn from \"E:\\\\Github\\\\ethSwap\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"E:\\\\Github\\\\ethSwap\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _createClass from \"E:\\\\Github\\\\ethSwap\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _inherits from \"E:\\\\Github\\\\ethSwap\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"E:\\\\Github\\\\ethSwap\\\\src\\\\components\\\\App.js\";\nimport React, { Component } from 'react';\nimport Web3 from 'web3';\nimport './App.css';\nimport Navbar from './Navbar';\nimport Main from './Main';\nimport Token from '../abis/Token.json';\nimport ethSwap from '../abis/ethSwap.json';\n\nvar App =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(App, _Component);\n\n  _createClass(App, [{\n    key: \"componentWillMount\",\n    value: function () {\n      var _componentWillMount = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee() {\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return this.loadWeb3();\n\n              case 2:\n                _context.next = 4;\n                return this.loadBlockchainData();\n\n              case 4:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function componentWillMount() {\n        return _componentWillMount.apply(this, arguments);\n      }\n\n      return componentWillMount;\n    }()\n  }, {\n    key: \"loadBlockchainData\",\n    value: function () {\n      var _loadBlockchainData = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee2() {\n        var web3, accounts, ethBalance, networkId, tokenData, token, tokenBalance, ethSwapData, ethswap;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                web3 = window.web3;\n                _context2.next = 3;\n                return web3.eth.getAccounts();\n\n              case 3:\n                accounts = _context2.sent;\n                //console.log(accounts[0])\n                this.setState({\n                  account: accounts[0]\n                }); //console.log(this.state.account)\n\n                _context2.next = 7;\n                return web3.eth.getBalance(this.state.account);\n\n              case 7:\n                ethBalance = _context2.sent;\n                this.setState({\n                  ethBalance: ethBalance\n                }); //ES6 - {ethBalance : ethBalance}\n                //console.log(this.state.ethBalance)\n\n                /*\r\n                const abi = Token.abi\r\n                const networkId = await web3.eth.net.getId() //returns 5777 as we are connected to ganache\r\n                //const address = Token.networks['5777'].address\r\n                const address = Token.networks[networkId]\r\n                const token = new web3.eth.Contract(abi, address)\r\n                console.log(token)\r\n                */\n                //Load Token\n\n                _context2.next = 11;\n                return web3.eth.net.getId();\n\n              case 11:\n                networkId = _context2.sent;\n                //returns 5777 as we are connected to ganache\n                tokenData = Token.networks[networkId];\n\n                if (!tokenData) {\n                  _context2.next = 22;\n                  break;\n                }\n\n                token = new web3.eth.Contract(Token.abi, tokenData.address); //console.log(token)\n\n                this.setState({\n                  token: token\n                }); //{token : token}\n\n                _context2.next = 18;\n                return token.methods.balanceOf(this.state.account).call();\n\n              case 18:\n                tokenBalance = _context2.sent;\n                //console.log(\"Token Balance \", tokenBalance.toString())\n                this.setState({\n                  tokenBalance: tokenBalance.toString()\n                });\n                _context2.next = 23;\n                break;\n\n              case 22:\n                window.alert('Token Contract not deployed to detected network');\n\n              case 23:\n                //Load ethSwap\n                ethSwapData = ethSwap.networks[networkId];\n\n                if (ethSwapData) {\n                  ethswap = new web3.eth.Contract(ethSwap.abi, ethSwapData.address); //console.log(ethswap)\n\n                  this.setState({\n                    ethswap: ethswap\n                  }); //{ethswap : ethswap}\n                } else {\n                  window.alert('ethSwap Contract not deployed to detected network');\n                } //after everything is finished above setting loading state to false so main component can m\n\n\n              case 25:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function loadBlockchainData() {\n        return _loadBlockchainData.apply(this, arguments);\n      }\n\n      return loadBlockchainData;\n    }()\n  }, {\n    key: \"loadWeb3\",\n    value: function () {\n      var _loadWeb = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee3() {\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                if (!window.ethereum) {\n                  _context3.next = 6;\n                  break;\n                }\n\n                window.web3 = new Web3(window.ethereum);\n                _context3.next = 4;\n                return window.ethereum.enable();\n\n              case 4:\n                _context3.next = 7;\n                break;\n\n              case 6:\n                if (window.web3) {\n                  window.web3 = new Web3(window.web3.currentProvider);\n                } else {\n                  window.alert('Non-Ethereum browser detected. You should consider trying MetaMask!');\n                }\n\n              case 7:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3);\n      }));\n\n      function loadWeb3() {\n        return _loadWeb.apply(this, arguments);\n      }\n\n      return loadWeb3;\n    }()\n  }]);\n\n  function App(props) {\n    var _this;\n\n    _classCallCheck(this, App);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(App).call(this, props));\n    _this.state = {\n      account: '',\n      token: {},\n      //empty object\n      ethswap: {},\n      //empty object\n      ethBalance: '0',\n      tokenBalance: '0',\n      loading: true\n    };\n    return _this;\n  }\n\n  _createClass(App, [{\n    key: \"render\",\n    value: function render() {\n      var content;\n      var loading = false;\n\n      if (this.state.loading) {\n        content = React.createElement(\"p\", {\n          id: \"loader\",\n          className: \"text-center\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 92\n          },\n          __self: this\n        }, \"Loading...\");\n      } else {\n        content = React.createElement(Main, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 94\n          },\n          __self: this\n        });\n      }\n\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 98\n        },\n        __self: this\n      }, React.createElement(Navbar, {\n        account: this.state.account,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 99\n        },\n        __self: this\n      }), React.createElement(\"div\", {\n        className: \"container-fluid mt-5\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 100\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"row\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 101\n        },\n        __self: this\n      }, React.createElement(\"main\", {\n        role: \"main\",\n        className: \"col-lg-12 d-flex text-center\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 102\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"content mr-auto ml-auto\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 103\n        },\n        __self: this\n      }, React.createElement(\"a\", {\n        href: \"http://www.dappuniversity.com/bootcamp\",\n        target: \"_blank\",\n        rel: \"noopener noreferrer\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 104\n        },\n        __self: this\n      }), content)))));\n    }\n  }]);\n\n  return App;\n}(Component);\n\nexport default App;","map":{"version":3,"sources":["E:\\Github\\ethSwap\\src\\components\\App.js"],"names":["React","Component","Web3","Navbar","Main","Token","ethSwap","App","loadWeb3","loadBlockchainData","web3","window","eth","getAccounts","accounts","setState","account","getBalance","state","ethBalance","net","getId","networkId","tokenData","networks","token","Contract","abi","address","methods","balanceOf","call","tokenBalance","toString","alert","ethSwapData","ethswap","ethereum","enable","currentProvider","props","loading","content"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport Web3 from 'web3';\r\nimport './App.css';\r\nimport Navbar from './Navbar';\r\nimport Main from './Main';\r\nimport Token from '../abis/Token.json'\r\nimport ethSwap from '../abis/ethSwap.json'\r\n\r\nclass App extends Component {\r\n\r\n  async componentWillMount() {\r\n    await this.loadWeb3()\r\n    await this.loadBlockchainData()\r\n  }\r\n\r\n  async loadBlockchainData() {\r\n    const web3 = window.web3\r\n    const accounts = await web3.eth.getAccounts()\r\n    //console.log(accounts[0])\r\n    this.setState({account : accounts[0]})\r\n    //console.log(this.state.account)\r\n    const ethBalance = await web3.eth.getBalance(this.state.account)\r\n    this.setState({ethBalance}) //ES6 - {ethBalance : ethBalance}\r\n    //console.log(this.state.ethBalance)\r\n\r\n    /*\r\n    const abi = Token.abi\r\n    const networkId = await web3.eth.net.getId() //returns 5777 as we are connected to ganache\r\n    //const address = Token.networks['5777'].address\r\n    const address = Token.networks[networkId]\r\n    const token = new web3.eth.Contract(abi, address)\r\n    console.log(token)\r\n    */\r\n\r\n  //Load Token\r\n   const networkId = await web3.eth.net.getId() //returns 5777 as we are connected to ganache\r\n   const tokenData = Token.networks[networkId]\r\n   if(tokenData){\r\n    const token = new web3.eth.Contract(Token.abi, tokenData.address)\r\n    //console.log(token)\r\n    this.setState({token}) //{token : token}\r\n    let tokenBalance = await token.methods.balanceOf(this.state.account).call()\r\n    //console.log(\"Token Balance \", tokenBalance.toString())\r\n    this.setState({tokenBalance : tokenBalance.toString()})\r\n   } else {\r\n    window.alert('Token Contract not deployed to detected network')\r\n   }\r\n\r\n    //Load ethSwap\r\n    const ethSwapData = ethSwap.networks[networkId]\r\n    if(ethSwapData){\r\n     const ethswap = new web3.eth.Contract(ethSwap.abi, ethSwapData.address)\r\n     //console.log(ethswap)\r\n     this.setState({ethswap}) //{ethswap : ethswap}\r\n    } else {\r\n     window.alert('ethSwap Contract not deployed to detected network')\r\n    }\r\n    //after everything is finished above setting loading state to false so main component can m\r\n }\r\n\r\n\r\n  async loadWeb3() {\r\n    if (window.ethereum) {\r\n    window.web3 = new Web3(window.ethereum)\r\n    await window.ethereum.enable()\r\n    }\r\n    else if (window.web3) {\r\n      window.web3 = new Web3(window.web3.currentProvider)\r\n    }\r\n    else {\r\n      window.alert('Non-Ethereum browser detected. You should consider trying MetaMask!')\r\n    }\r\n  }\r\n\r\n  constructor(props) {\r\n    super(props)\r\n    this.state = {\r\n      account : '',\r\n      token : {}, //empty object\r\n      ethswap : {}, //empty object\r\n      ethBalance : '0',\r\n      tokenBalance : '0',\r\n      loading : true\r\n    }\r\n  }\r\n\r\n\r\n  render() {\r\n    let content\r\n    let loading = false\r\n    if(this.state.loading){\r\n      content = <p id=\"loader\" className=\"text-center\">Loading...</p>\r\n    } else {\r\n      content = <Main/>\r\n    }\r\n\r\n    return (\r\n      <div>\r\n        <Navbar account = {this.state.account}/> \r\n        <div className=\"container-fluid mt-5\">\r\n          <div className=\"row\">\r\n            <main role=\"main\" className=\"col-lg-12 d-flex text-center\">\r\n              <div className=\"content mr-auto ml-auto\">\r\n                <a\r\n                  href=\"http://www.dappuniversity.com/bootcamp\"\r\n                  target=\"_blank\"\r\n                  rel=\"noopener noreferrer\"\r\n                >\r\n                </a>\r\n                {content}\r\n              </div>\r\n            </main>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n"]},"metadata":{},"sourceType":"module"}